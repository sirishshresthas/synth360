{
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "from src.core import DataProcessor"
      ],
      "outputs": [
        {
          "output_type": "error",
          "ename": "ModuleNotFoundError",
          "evalue": "No module named 'pydantic_settings'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
            "Cell \u001b[0;32mIn[1], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01msrc\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mcore\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m DataProcessor\n",
            "File \u001b[0;32m/mnt/batch/tasks/shared/LS_root/mounts/clusters/zeusmlh13-new/code/Users/shresthas/sources/ss-synthetic-data-generation/src/core/__init__.py:1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mLoadBlob\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m LoadBlob\n\u001b[1;32m      2\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mSynthLeader\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m SynthLeader\n\u001b[1;32m      3\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mDataProcessor\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m DataProcessor\n",
            "File \u001b[0;32m/mnt/batch/tasks/shared/LS_root/mounts/clusters/zeusmlh13-new/code/Users/shresthas/sources/ss-synthetic-data-generation/src/core/LoadBlob.py:8\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mio\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m StringIO\n\u001b[1;32m      7\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01msrc\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mcore\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mutilities\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;28mglobals\u001b[39m\n\u001b[0;32m----> 8\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01msrc\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mcore\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mutilities\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01msettings\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m settings\n\u001b[1;32m     10\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mazure\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mstorage\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mblob\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m (BlobServiceClient, ContainerClient)\n\u001b[1;32m     13\u001b[0m \u001b[38;5;28;01mclass\u001b[39;00m \u001b[38;5;21;01mLoadBlob\u001b[39;00m(\u001b[38;5;28mobject\u001b[39m):\n",
            "File \u001b[0;32m/mnt/batch/tasks/shared/LS_root/mounts/clusters/zeusmlh13-new/code/Users/shresthas/sources/ss-synthetic-data-generation/src/core/utilities/settings.py:3\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mos\u001b[39;00m\n\u001b[0;32m----> 3\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mconfig\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m EXPORT_CONFIG\n\u001b[1;32m      5\u001b[0m \u001b[38;5;66;03m# Define a default environment explicitly\u001b[39;00m\n\u001b[1;32m      6\u001b[0m DEFAULT_ENV \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mdev\u001b[39m\u001b[38;5;124m\"\u001b[39m\n",
            "File \u001b[0;32m/mnt/batch/tasks/shared/LS_root/mounts/clusters/zeusmlh13-new/code/Users/shresthas/sources/ss-synthetic-data-generation/src/core/utilities/config.py:2\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mpydantic\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m Field\n\u001b[0;32m----> 2\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mpydantic_settings\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m BaseSettings\n\u001b[1;32m      5\u001b[0m \u001b[38;5;28;01mclass\u001b[39;00m \u001b[38;5;21;01mSettings\u001b[39;00m(BaseSettings):\n\u001b[1;32m      6\u001b[0m     ENV: \u001b[38;5;28mstr\u001b[39m \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mdev\u001b[39m\u001b[38;5;124m\"\u001b[39m\n",
            "\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'pydantic_settings'"
          ]
        }
      ],
      "execution_count": 1,
      "metadata": {
        "gather": {
          "logged": 1710742565637
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data_processor = DataProcessor(data=\"BMK_2018.csv\")\n",
        "data_processor"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 2,
          "data": {
            "text/plain": "<class 'str'> BMK_2018.csv"
          },
          "metadata": {}
        }
      ],
      "execution_count": 2,
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "df = data_processor.get_data()"
      ],
      "outputs": [],
      "execution_count": 3,
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "data_processor.df.shape"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 4,
          "data": {
            "text/plain": "(227959, 215)"
          },
          "metadata": {}
        }
      ],
      "execution_count": 4,
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "print(data_processor.rater_col_name)\n",
        "print(data_processor.id_key)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "RaterType\nESI_Key\n"
        }
      ],
      "execution_count": 5,
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "data_processor.median_rater_counts()"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 6,
          "data": {
            "text/plain": "RaterType\nboss             1.0\ndirect report    3.0\nother            1.0\npeer             4.0\nsuperior         1.0\ndtype: float64"
          },
          "metadata": {}
        }
      ],
      "execution_count": 6,
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "data_processor.filter_data_with_all_raters()\n",
        "data_processor.df.shape"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 7,
          "data": {
            "text/plain": "(166814, 215)"
          },
          "metadata": {}
        }
      ],
      "execution_count": 7,
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "data_processor.df.RaterType.unique()"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 8,
          "data": {
            "text/plain": "array(['boss', 'direct report', 'peer', 'self'], dtype=object)"
          },
          "metadata": {}
        }
      ],
      "execution_count": 8,
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "data_processor.items_cols"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 9,
          "data": {
            "text/plain": "[]"
          },
          "metadata": {}
        }
      ],
      "execution_count": 9,
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "demo_cols = [\n",
        "    \"Age\",\n",
        "    \"Race\",\n",
        "    \"OrganizationSector\",\n",
        "    \"OrganizationType\",\n",
        "    \"RaterType\",\n",
        "    \"OrganizationLevel\",\n",
        "    \"Gender\"\n",
        "]\n",
        "\n",
        "# all the items cols\n",
        "items_cols = [\"ESI_Key\", \"RaterType\", \"BMK_S01_Strategic\", \"BMK_S02_Quick\", \"BMK_S03_Decisive\", \"BMK_S04_Change\", \"BMK_S05_Leading\", \"BMK_S06_Confront\", \"BMK_S07_Participative\",\n",
        "              \"BMK_S08_Build\", \"BMK_S09_Compassion\", \"BMK_S10_Putting\", \"BMK_S11_Respect\", \"BMK_D01_Interper\", \"BMK_D02_DiffBuild\", \"BMK_D03_DiffChange\", \"BMK_D04_Failure\", \"BMK_D05_Narrow\"]\n",
        "\n",
        "\n",
        "data_processor.items_cols = items_cols\n",
        "data_processor.demo_cols = demo_cols"
      ],
      "outputs": [],
      "execution_count": 10,
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "real_data = data_processor.pivot_rater_data(skip=2)"
      ],
      "outputs": [],
      "execution_count": 11,
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "column_names = [\n",
        "    'BMK_S01_Strategic',\n",
        "    'BMK_S02_Quick',\n",
        "    'BMK_S03_Decisive',\n",
        "    'BMK_S04_Change',\n",
        "    'BMK_S05_Leading',\n",
        "    'BMK_S06_Confront',\n",
        "    'BMK_S07_Participative',\n",
        "    'BMK_S08_Build',\n",
        "    'BMK_S09_Compassion',\n",
        "    'BMK_S10_Putting',\n",
        "    'BMK_S11_Respect',\n",
        "    'BMK_D01_Interper',\n",
        "    'BMK_D02_DiffBuild',\n",
        "    'BMK_D03_DiffChange',\n",
        "    'BMK_D04_Failure',\n",
        "    'BMK_D05_Narrow',\n",
        "    'BMK_S01_Strategic_boss',\n",
        "    'BMK_S01_Strategic_direct_report',\n",
        "    'BMK_S01_Strategic_peer',\n",
        "    'BMK_S02_Quick_boss',\n",
        "    'BMK_S02_Quick_direct_report',\n",
        "    'BMK_S02_Quick_peer',\n",
        "    'BMK_S03_Decisive_boss',\n",
        "    'BMK_S03_Decisive_direct_report',\n",
        "    'BMK_S03_Decisive_peer',\n",
        "    'BMK_S04_Change_boss',\n",
        "    'BMK_S04_Change_direct_report',\n",
        "    'BMK_S04_Change_peer',\n",
        "    'BMK_S05_Leading_boss',\n",
        "    'BMK_S05_Leading_direct_report',\n",
        "    'BMK_S05_Leading_peer',\n",
        "    'BMK_S06_Confront_boss',\n",
        "    'BMK_S06_Confront_direct_report',\n",
        "    'BMK_S06_Confront_peer',\n",
        "    'BMK_S07_Participative_boss',\n",
        "    'BMK_S07_Participative_direct_report',\n",
        "    'BMK_S07_Participative_peer',\n",
        "    'BMK_S08_Build_boss',\n",
        "    'BMK_S08_Build_direct_report',\n",
        "    'BMK_S08_Build_peer',\n",
        "    'BMK_S09_Compassion_boss',\n",
        "    'BMK_S09_Compassion_direct_report',\n",
        "    'BMK_S09_Compassion_peer',\n",
        "    'BMK_S10_Putting_boss',\n",
        "    'BMK_S10_Putting_direct_report',\n",
        "    'BMK_S10_Putting_peer',\n",
        "    'BMK_S11_Respect_boss',\n",
        "    'BMK_S11_Respect_direct_report',\n",
        "    'BMK_S11_Respect_peer',\n",
        "    'BMK_D01_Interper_boss',\n",
        "    'BMK_D01_Interper_direct_report',\n",
        "    'BMK_D01_Interper_peer',\n",
        "    'BMK_D02_DiffBuild_boss',\n",
        "    'BMK_D02_DiffBuild_direct_report',\n",
        "    'BMK_D02_DiffBuild_peer',\n",
        "    'BMK_D03_DiffChange_boss',\n",
        "    'BMK_D03_DiffChange_direct_report',\n",
        "    'BMK_D03_DiffChange_peer',\n",
        "    'BMK_D04_Failure_boss',\n",
        "    'BMK_D04_Failure_direct_report',\n",
        "    'BMK_D04_Failure_peer',\n",
        "    'BMK_D05_Narrow_boss',\n",
        "    'BMK_D05_Narrow_direct_report',\n",
        "    'BMK_D05_Narrow_peer'\n",
        "]"
      ],
      "outputs": [],
      "execution_count": 12,
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "from src.core import SynthLeader"
      ],
      "outputs": [],
      "execution_count": 13,
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "synth = SynthLeader(df=real_data, name=\"BMK_2018\")"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Cuda: True\n"
        }
      ],
      "execution_count": 14,
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "# synth.metadata"
      ],
      "outputs": [],
      "execution_count": 15,
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Real Dataset"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "real_corr = synth.generate_corr_matrix(df=real_data)\n",
        "fig = synth.style_correlation_matrix(real_corr)\n",
        "data_processor.save_data(fig.to_html(), name=\"real_corr.html\")"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "real_corr.html uploaded\n"
        }
      ],
      "execution_count": 16,
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "%store real_data\n",
        "%store real_corr\n",
        "%store column_names\n",
        "%store synth\n",
        "%store data_processor"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Stored 'real_data' (DataFrame)\nStored 'real_corr' (DataFrame)\nStored 'column_names' (list)\nStored 'synth' (SynthLeader)\nStored 'data_processor' (DataProcessor)\n"
        }
      ],
      "execution_count": 17,
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Output"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "data_processor.save_data(real_corr.to_csv(index=False), name='real_corr.csv')"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "real_corr.csv uploaded\n"
        }
      ],
      "execution_count": 18,
      "metadata": {}
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)"
    },
    "language_info": {
      "name": "python",
      "version": "3.8.5",
      "mimetype": "text/x-python",
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "pygments_lexer": "ipython3",
      "nbconvert_exporter": "python",
      "file_extension": ".py"
    },
    "microsoft": {
      "ms_spell_check": {
        "ms_spell_check_language": "en"
      }
    },
    "kernel_info": {
      "name": "python3"
    },
    "nteract": {
      "version": "nteract-front-end@1.0.0"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 4
}